<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sometimes Naive</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wyu.space/"/>
  <updated>2018-05-03T13:50:04.848Z</updated>
  <id>http://wyu.space/</id>
  
  <author>
    <name>王宇</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java虚拟机垃圾收集器</title>
    <link href="http://wyu.space/2018/05/03/Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/"/>
    <id>http://wyu.space/2018/05/03/Java虚拟机垃圾收集器/</id>
    <published>2018-05-03T10:36:06.000Z</published>
    <updated>2018-05-03T13:50:04.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Serial收集器"><a href="#Serial收集器" class="headerlink" title="Serial收集器"></a>Serial收集器</h1><h1 id="ParNew收集器"><a href="#ParNew收集器" class="headerlink" title="ParNew收集器"></a>ParNew收集器</h1><h1 id="Parallel-Scavenge收集器"><a href="#Parallel-Scavenge收集器" class="headerlink" title="Parallel Scavenge收集器"></a>Parallel Scavenge收集器</h1><h1 id="Serial-Old收集器"><a href="#Serial-Old收集器" class="headerlink" title="Serial Old收集器"></a>Serial Old收集器</h1><h1 id="Parallel-Old收集器"><a href="#Parallel-Old收集器" class="headerlink" title="Parallel Old收集器"></a>Parallel Old收集器</h1><h1 id="CMS收集器"><a href="#CMS收集器" class="headerlink" title="CMS收集器"></a>CMS收集器</h1><h1 id="G1收集器"><a href="#G1收集器" class="headerlink" title="G1收集器"></a>G1收集器</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Serial收集器&quot;&gt;&lt;a href=&quot;#Serial收集器&quot; class=&quot;headerlink&quot; title=&quot;Serial收集器&quot;&gt;&lt;/a&gt;Serial收集器&lt;/h1&gt;&lt;h1 id=&quot;ParNew收集器&quot;&gt;&lt;a href=&quot;#ParNew收集器&quot; class
    
    </summary>
    
      <category term="Java" scheme="http://wyu.space/categories/Java/"/>
    
    
      <category term="Java" scheme="http://wyu.space/tags/Java/"/>
    
      <category term="垃圾回收" scheme="http://wyu.space/tags/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式使用规则</title>
    <link href="http://wyu.space/2018/05/03/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://wyu.space/2018/05/03/正则表达式/</id>
    <published>2018-05-03T06:53:36.000Z</published>
    <updated>2018-05-03T07:44:47.178Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是正则表达式？"><a href="#什么是正则表达式？" class="headerlink" title="什么是正则表达式？"></a>什么是正则表达式？</h1><p>正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。</p>
<h1 id="语系的影响"><a href="#语系的影响" class="headerlink" title="语系的影响"></a>语系的影响</h1><p>不同语系的字符顺序不同，使用范围选取会得到不同的结果。</p>
<h1 id="基础正则表达式"><a href="#基础正则表达式" class="headerlink" title="基础正则表达式"></a>基础正则表达式</h1><h2 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h2><table><tr><th>特殊符号</th><th>代表意义</th></tr><tr><td>[:alnum:]</td><td>英文大小写字符及数字</td></tr><tr><td>[:alpha:]</td><td>任何英文大小写字符</td></tr><tr><td>[:upper:]</td><td>大写字符</td></tr><tr><td>[:lower:]</td><td>小写字符</td></tr><tr><td>[:digit:]</td><td>数字</td></tr></table>

<h2 id="中括号"><a href="#中括号" class="headerlink" title="中括号"></a>中括号</h2><p>中括号中不管有几个字符，只代表一个字符。</p>
<h2 id="caret"><a href="#caret" class="headerlink" title="caret"></a>caret</h2><ol>
<li>^代表反向选择。例如[^a]bc。</li>
<li>只有^,匹配行首</li>
</ol>
<h2 id="美元符号"><a href="#美元符号" class="headerlink" title="美元符号"></a>美元符号</h2><p>匹配行末。</p>
<h2 id="任意一个字符"><a href="#任意一个字符" class="headerlink" title="任意一个字符"></a>任意一个字符</h2><p>.：代表一定有一个任意字符。</p>
<h2 id="重复字符"><a href="#重复字符" class="headerlink" title="重复字符"></a>重复字符</h2><p>*：代表重复前一个字符0到无穷次。</p>
<h2 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h2><p>.*：代表0个或多个任意字符。</p>
<h2 id="大括号"><a href="#大括号" class="headerlink" title="大括号"></a>大括号</h2><p>大括号中限定前面字符的个数。例如w{2,5}。</p>
<h1 id="扩展正则表达式"><a href="#扩展正则表达式" class="headerlink" title="扩展正则表达式"></a>扩展正则表达式</h1><table><tr><th>RE字符</th><th>代表意义</th></tr><tr><td>+</td><td>重复一个或一个以上的前一个RE字符</td></tr><tr><td>?</td><td>零个或一个的前一个RE字符</td></tr><tr><td>|</td><td>or的方式找出多个字符串</td></tr><tr><td>()</td><td>一组字符串</td></tr><tr><td>()+</td><td>多个重复组字符串</td></tr></table>

<h2 id="感叹号"><a href="#感叹号" class="headerlink" title="感叹号"></a>感叹号</h2><p>感叹号在正则表达式中不是特殊字符，没有反向选择功能。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是正则表达式？&quot;&gt;&lt;a href=&quot;#什么是正则表达式？&quot; class=&quot;headerlink&quot; title=&quot;什么是正则表达式？&quot;&gt;&lt;/a&gt;什么是正则表达式？&lt;/h1&gt;&lt;p&gt;正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字
    
    </summary>
    
      <category term="正则表达式" scheme="http://wyu.space/categories/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
    
      <category term="正则表达式" scheme="http://wyu.space/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Linux文件压缩与打包</title>
    <link href="http://wyu.space/2018/05/02/Linux%E6%96%87%E4%BB%B6%E5%8E%8B%E7%BC%A9%E4%B8%8E%E6%89%93%E5%8C%85/"/>
    <id>http://wyu.space/2018/05/02/Linux文件压缩与打包/</id>
    <published>2018-05-02T07:57:49.000Z</published>
    <updated>2018-05-02T15:31:08.203Z</updated>
    
    <content type="html"><![CDATA[<h1 id="压缩比"><a href="#压缩比" class="headerlink" title="压缩比"></a>压缩比</h1><p>压缩前与压缩后文件所占用的磁盘空间大小的比。</p>
<h1 id="常用压缩命令与技术"><a href="#常用压缩命令与技术" class="headerlink" title="常用压缩命令与技术"></a>常用压缩命令与技术</h1><h2 id="Compress"><a href="#Compress" class="headerlink" title="Compress"></a>Compress</h2><p>已经过时</p>
<h2 id="gzip-zcat"><a href="#gzip-zcat" class="headerlink" title="gzip,zcat"></a>gzip,zcat</h2><h3 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h3><p>*.gz</p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ol>
<li>gzip</li>
<li>zcat：如果压缩的是文件，可以使用该命令读取</li>
</ol>
<h2 id="bzip2-bzcat"><a href="#bzip2-bzcat" class="headerlink" title="bzip2,bzcat"></a>bzip2,bzcat</h2><p>压缩比优于gzip</p>
<h3 id="文件格式-1"><a href="#文件格式-1" class="headerlink" title="文件格式"></a>文件格式</h3><p><em>.bz,</em>.bz2,<em>.tbz,</em>.tbz2</p>
<h3 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h3><ol>
<li>bzip2</li>
<li>bzcat：如果压缩的是文件，可以使用该命令读取</li>
</ol>
<h2 id="tar：打包"><a href="#tar：打包" class="headerlink" title="tar：打包"></a>tar：打包</h2><p>通过gzip/bzip2同时进行压缩</p>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ol>
<li>-z, –gzip, –gunzip, –ungzip：通过 gzip 过滤归档</li>
<li>-x：解打包或解压缩</li>
<li>-v, –verbose  详细地列出处理的文件</li>
<li>-f：文件名称</li>
<li>-j, –bzip2 通过 bzip2 过滤归档</li>
<li>-p：保存文件原本的权限与属性</li>
<li>-c：新建打包文件</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;压缩比&quot;&gt;&lt;a href=&quot;#压缩比&quot; class=&quot;headerlink&quot; title=&quot;压缩比&quot;&gt;&lt;/a&gt;压缩比&lt;/h1&gt;&lt;p&gt;压缩前与压缩后文件所占用的磁盘空间大小的比。&lt;/p&gt;
&lt;h1 id=&quot;常用压缩命令与技术&quot;&gt;&lt;a href=&quot;#常用压缩命令与技术&quot;
    
    </summary>
    
      <category term="Linux" scheme="http://wyu.space/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://wyu.space/tags/Linux/"/>
    
      <category term="文件压缩" scheme="http://wyu.space/tags/%E6%96%87%E4%BB%B6%E5%8E%8B%E7%BC%A9/"/>
    
  </entry>
  
  <entry>
    <title>Linux基本操作</title>
    <link href="http://wyu.space/2018/05/02/Linux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://wyu.space/2018/05/02/Linux基本操作/</id>
    <published>2018-05-02T07:37:24.000Z</published>
    <updated>2018-05-02T15:38:42.429Z</updated>
    
    <content type="html"><![CDATA[<h1 id="登录与注销"><a href="#登录与注销" class="headerlink" title="登录与注销"></a>登录与注销</h1><h2 id="注销Linux"><a href="#注销Linux" class="headerlink" title="注销Linux"></a>注销Linux</h2><p>exit</p>
<h1 id="图形界面与运行级别"><a href="#图形界面与运行级别" class="headerlink" title="图形界面与运行级别"></a>图形界面与运行级别</h1><h2 id="X-Window"><a href="#X-Window" class="headerlink" title="X Window"></a>X Window</h2><h3 id="重启X-Window"><a href="#重启X-Window" class="headerlink" title="重启X Window"></a>重启X Window</h3><ol>
<li>注销后重新登录</li>
<li>快捷键：Alt + Ctrl + Backspace</li>
</ol>
<h3 id="终端界面与图形界面切换"><a href="#终端界面与图形界面切换" class="headerlink" title="终端界面与图形界面切换"></a>终端界面与图形界面切换</h3><p>终端界面：Ctrl + Alt + F1~F6，运行级别为3,进程名对应tty1~tty6<br>图形界面：Ctrl + Alt + F7，运行级别为5, 进程名tty7</p>
<h3 id="运行级别"><a href="#运行级别" class="headerlink" title="运行级别"></a>运行级别</h3><ul>
<li>0：关机</li>
<li>3：完全多用户模式</li>
<li>5：X Window系统</li>
<li>6：重启系统</li>
</ul>
<h3 id="默认运行级别"><a href="#默认运行级别" class="headerlink" title="默认运行级别"></a>默认运行级别</h3><p>/etc/inittab</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;登录与注销&quot;&gt;&lt;a href=&quot;#登录与注销&quot; class=&quot;headerlink&quot; title=&quot;登录与注销&quot;&gt;&lt;/a&gt;登录与注销&lt;/h1&gt;&lt;h2 id=&quot;注销Linux&quot;&gt;&lt;a href=&quot;#注销Linux&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
      <category term="Linux" scheme="http://wyu.space/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://wyu.space/tags/Linux/"/>
    
      <category term="基本操作" scheme="http://wyu.space/tags/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>Java相关知识点</title>
    <link href="http://wyu.space/2018/05/02/Java%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://wyu.space/2018/05/02/Java相关知识点/</id>
    <published>2018-05-01T17:11:55.000Z</published>
    <updated>2018-05-02T15:36:35.380Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CGLIB和Java动态代理的区别"><a href="#CGLIB和Java动态代理的区别" class="headerlink" title="CGLIB和Java动态代理的区别"></a>CGLIB和Java动态代理的区别</h1><ol>
<li>Java动态代理只能够对接口进行代理，不能对普通的类进行代理（因为所有生成的代理类的父类为Proxy，Java类继承机制不允许多重继承）；CGLIB能够代理普通类；</li>
<li>Java动态代理使用Java原生的反射API进行操作，在生成类上比较高效；CGLIB使用ASM框架直接对字节码进行操作，在类的执行过程中比较高效</li>
</ol>
<h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><h2 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h2><p>同步代码块 使用字节码指令 monitorenter monitorexit(一次只能一个进入)</p>
<p>同步方法 ACC_synchronized标志位</p>
<h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><ol>
<li>保证多线程共享变量可见性</li>
<li>禁止指令重排序</li>
<li>不保证原子性</li>
</ol>
<p>直接写入主内存，不写入本地内存</p>
<h3 id="不保证原子性"><a href="#不保证原子性" class="headerlink" title="不保证原子性"></a>不保证原子性</h3><p>在volatile变量前加上lock汇编指令</p>
<ol>
<li>重排序时不能把后面的指令重排序到内存屏障之前的位置</li>
<li>使得本CPU的Cache写入内存(相当于直接写入主内存)</li>
<li>写入动作也会引起别的CPU或者别的内核无效化其Cache(读取的时候去主内存读取)，相当于让新写入的值对别的线程可见。</li>
</ol>
<p>用处：</p>
<ol>
<li>多线程共享变量只读操作。根据只读变量当做标志位。</li>
<li>防止重排序<h2 id="CAS算法"><a href="#CAS算法" class="headerlink" title="CAS算法"></a>CAS算法</h2>使用处理器指令CMPXCHG</li>
</ol>
<p>自旋CAS：不断地获取，直到成功</p>
<h2 id="线程通讯"><a href="#线程通讯" class="headerlink" title="线程通讯"></a>线程通讯</h2><ol>
<li>wait,notify这类方法是定义在Object上的。</li>
<li>调用wait或者notify时必须首先通过synchronized关键字获取到对象的锁。</li>
<li>调用wait方法时会释放锁。调用notify时不会释放锁，代码走完才会释放锁。</li>
<li>join方法内部使用wait.join方法可以实现简单的线程等待。</li>
<li>wait和sleep遇到interrupt会抛出异常。</li>
<li>ThreadLocal保存线程隔离数据。</li>
</ol>
<p><img src="http://p1k0tu9ph.bkt.clouddn.com/18-3-7/54561571.jpg" alt=""></p>
<ol>
<li>一个对象拥有一个等待队列和同步队列</li>
<li>synchronized锁的对象一致才会互斥。</li>
</ol>
<h2 id="Lock和AQS"><a href="#Lock和AQS" class="headerlink" title="Lock和AQS"></a>Lock和AQS</h2><p><img src="http://p1k0tu9ph.bkt.clouddn.com/18-3-7/58571706.jpg" alt=""></p>
<h3 id="独占锁流程"><a href="#独占锁流程" class="headerlink" title="独占锁流程"></a>独占锁流程</h3><p><img src="http://p1k0tu9ph.bkt.clouddn.com/18-3-7/7892250.jpg" alt=""></p>
<h3 id="共享锁流程"><a href="#共享锁流程" class="headerlink" title="共享锁流程"></a>共享锁流程</h3><ol>
<li>入队列：线程获取锁失败后，创建一个节点，并将节点添加到等待队列尾，然后将线程阻塞，等待唤醒；</li>
<li>唤醒：另一个线程释放锁，取队列的第一个节点，将节点对应线程唤醒；</li>
<li>出队列：唤醒后的线程将尝试获取锁，成功后将自己移出队列，同时判断是否任然存在空闲的锁，如果存在则继续唤醒下一个节点。</li>
<li>每次只会唤醒第一个节点，如果同时释放多个锁，后续的节点将由前面被唤醒的节点来唤醒，尽量减少数据竞争。</li>
</ol>
<h2 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h2><p>独占的可重入锁</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="function"><span class="keyword">boolean</span> <span class="title">nonfairTryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</div><div class="line">  <span class="keyword">final</span> Thread current = Thread.currentThread();</div><div class="line">  <span class="keyword">int</span> c = getState();</div><div class="line">  <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, acquires)) &#123;</div><div class="line">      setExclusiveOwnerThread(current);</div><div class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//说白了，就是在这里！判断下获取锁的线程是否为当前线程，如果是，直接让state+1</span></div><div class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</div><div class="line">    <span class="keyword">int</span> nextc = c + acquires;</div><div class="line">    <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>) <span class="comment">// overflow</span></div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</div><div class="line">      setState(nextc);</div><div class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当头结点刚释放锁时候，假如这时候有一个线程调用的lock方法想要获取锁，那么他相对于队列中的线程就是不公平的</p>
<h2 id="ReentrantReadWriteLock"><a href="#ReentrantReadWriteLock" class="headerlink" title="ReentrantReadWriteLock"></a>ReentrantReadWriteLock</h2><ol>
<li>内部维护了两个Lock，一个ReadLock，一个WriteLock。</li>
<li>读锁是一个可重入的共享锁。写锁是一个可重入的独占锁。</li>
<li>内部维护时讲state变量分为高16位和低16位来操作。</li>
<li>读锁与写锁相互排斥 。比如在获取读锁时如果已经有写锁了，阻塞。反之亦然。</li>
</ol>
<h2 id="LockSupport"><a href="#LockSupport" class="headerlink" title="LockSupport"></a>LockSupport</h2><p>阻塞线程使用LockSupport工具类实现</p>
<p>monitorenter指令加上去之后线程切换上去之后发现没有进入又直接切换走。而LockSupport的park方法则是将线程休息，此时线程处于WAITING状态。CPU是不会切换上去的。这就大大减少了线程的上下文切换。</p>
<h1 id="Condition线程通讯"><a href="#Condition线程通讯" class="headerlink" title="Condition线程通讯"></a>Condition线程通讯</h1><p>Condition底层的线程等待也是使用的LockSupport的park方法。它对interrupt方法不敏感，而wait方法遇到interrupt就抛异常</p>
<p><img src="http://p1k0tu9ph.bkt.clouddn.com/18-3-7/11437042.jpg" alt=""></p>
<p>await方法，其实就是先释放锁(说白了底层就是更改了AQS的state),然后调用LockSupport的park方法park自己，再把自己丢进Condition的等待队列中。这里不要忘记了，释放锁的同时还通知了同步队列中的线程去拿锁哦。</p>
<p>signal方法其实就是将Condition等待队列中的线程移动到同步队列。至于它拿不拿的到锁，还是另外一回事。</p>
<h2 id="Condition底层模型"><a href="#Condition底层模型" class="headerlink" title="Condition底层模型"></a>Condition底层模型</h2><p><img src="http://p1k0tu9ph.bkt.clouddn.com/18-3-7/12960615.jpg" alt=""></p>
<p>调用await()<br><img src="http://p1k0tu9ph.bkt.clouddn.com/18-3-7/71246092.jpg" alt=""></p>
<p>调用signal()</p>
<p><img src="http://p1k0tu9ph.bkt.clouddn.com/18-3-7/55279777.jpg" alt=""></p>
<h1 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h1><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><h3 id="底层"><a href="#底层" class="headerlink" title="底层"></a>底层</h3><p><img src="http://p1k0tu9ph.bkt.clouddn.com/18-3-7/57832256.jpg" alt=""></p>
<p>为什么HashMap在扩容时数组的长度必须是2的倍数(默认16)，其实这和indexFor()这个方法有关系的，这个方法是根据key的hash值算出在数组对应的索引</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> h &amp; (length<span class="number">-1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>h &amp; (length-1)要和h%length的效果一样就必须保证length的长度是2的倍数</p>
<h3 id="扩容相关-容量，负载因子，2的倍数"><a href="#扩容相关-容量，负载因子，2的倍数" class="headerlink" title="扩容相关(容量，负载因子，2的倍数)"></a>扩容相关(容量，负载因子，2的倍数)</h3><p>数组的默认长度是16</p>
<p>原数组中的数据必须重新计算其在新数组中的位置，并放进去，这就是 resize</p>
<p>HashMap 中的元素个数超过(数组大小 *XloadFactor)时，就会进行数组扩容，loadFactor的默认值为 0.75，这是一个折中的取值</p>
<h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><h3 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h3><p>每当向数组中添加元素时，都要去检查添加后元素的个数是否会超出当前数组的长度，如果超出，数组将会进行扩容，以满足添加数据的需求。数组扩容有两个方法，其中开发者可以通过一个 public 的方法ensureCapacity(int minCapacity)来增加 ArrayList 的容量，而在存储元素等操作过程中，如果遇到容量不足，会调用priavte方法private void ensureCapacityInternal(int minCapacity)实现。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">int newCapacity = oldCapacity + (oldCapacity <span class="meta">&gt;&gt; </span><span class="number">1</span>)</div></pre></td></tr></table></figure>
<p>1.5倍</p>
<p>Arrays.copyOf方法:</p>
<p>根据newLength创建了一个数组，然后调用System.arraycopy把数据拷贝了过去。这个System.arraycopy又是个native方法，据说速度很快</p>
<h2 id="继承关系"><a href="#继承关系" class="headerlink" title="继承关系"></a>继承关系</h2><p><img src="http://p1k0tu9ph.bkt.clouddn.com/18-3-7/20882052.jpg" alt=""></p>
<p><img src="http://p1k0tu9ph.bkt.clouddn.com/18-3-7/49640930.jpg" alt=""></p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">Map</span> <span class="meta">map</span> = new HashMap()<span class="comment">;</span></div><div class="line">    <span class="keyword">Iterator </span><span class="keyword">iter </span>= <span class="meta">map</span>.entrySet().<span class="keyword">iterator();</span></div><div class="line"><span class="keyword"> </span>   <span class="meta">while</span> (<span class="keyword">iter.hasNext()) </span>&#123;</div><div class="line">        <span class="meta">Map</span>.Entry <span class="meta">entry</span> = (<span class="meta">Map</span>.Entry) <span class="keyword">iter.next();</span></div><div class="line"><span class="keyword"> </span>       Object key = <span class="meta">entry</span>.getKey()<span class="comment">;</span></div><div class="line">        Object val = <span class="meta">entry</span>.getValue()<span class="comment">;</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Map <span class="built_in">map</span> = <span class="keyword">new</span> <span class="keyword">HashMap</span>();</div><div class="line">Iterator iter = <span class="built_in">map</span>.keySet().iterator();</div><div class="line">    <span class="keyword">while</span> (iter.hasNext()) &#123;</div><div class="line">    <span class="keyword">Object</span> <span class="built_in">key</span> = iter.next();</div><div class="line">    <span class="keyword">Object</span> val = <span class="built_in">map</span>.<span class="built_in">get</span>(<span class="built_in">key</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第一种快</p>
<p>在使用Iterable遍历Collection时，当Collection内部的元素为对象类型时，.next返回的是指针。也就是说是浅拷贝。</p>
<p>集合与集合之间的转换<br>Map–》Collection：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Map</span><span class="selector-class">.keySet</span>(),<span class="selector-tag">entrySet</span>(),<span class="selector-class">.values</span>().三个<span class="selector-tag">API</span></div></pre></td></tr></table></figure></p>
<p>List《—》Set《—》Queue:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//<span class="keyword">Set</span><span class="comment">--》List</span></div><div class="line"><span class="keyword">List</span>&lt;<span class="keyword">String</span>&gt; list3 = <span class="keyword">new</span> ArrayList&lt;<span class="keyword">String</span>&gt;(<span class="keyword">new</span> HashSet&lt;<span class="keyword">String</span>&gt;());</div><div class="line">//List<span class="comment">--》Set</span></div><div class="line"><span class="keyword">Set</span>&lt;<span class="keyword">String</span>&gt; <span class="keyword">set</span> = <span class="keyword">new</span> HashSet&lt;<span class="keyword">String</span>&gt;(<span class="keyword">new</span> ArrayList&lt;<span class="keyword">String</span>&gt;());</div></pre></td></tr></table></figure></p>
<h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><p>双向链表</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> add(<span class="keyword">int</span> <span class="keyword">index</span>, E element) &#123;</div><div class="line">    checkPositionIndex(<span class="keyword">index</span>);</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">index</span> == size)</div><div class="line">        <span class="comment">//链表尾部添加element</span></div><div class="line">        linkLast(element);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        在某个元素前面添加element</div><div class="line">        linkBefore(element, node(<span class="keyword">index</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> E get(<span class="keyword">int</span> <span class="keyword">index</span>) &#123;</div><div class="line">    checkElementIndex(<span class="keyword">index</span>);</div><div class="line">    <span class="keyword">return</span> node(<span class="keyword">index</span>).item;</div><div class="line">&#125;</div><div class="line"></div><div class="line">    Node&lt;E&gt; node(<span class="keyword">int</span> <span class="keyword">index</span>) &#123;</div><div class="line">    <span class="comment">// assert isElementIndex(index);</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">index</span> &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</div><div class="line">        Node&lt;E&gt; x = first;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">index</span>; i++)</div><div class="line">            x = x.next;</div><div class="line">        <span class="keyword">return</span> x;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        Node&lt;E&gt; x = last;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; <span class="keyword">index</span>; i--)</div><div class="line">            x = x.prev;</div><div class="line">        <span class="keyword">return</span> x;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>根据索引拿到Node后，其他的就是链表的基本操作了，新增和删除的时候其实都只会影响某个Node的前后节点，挪一挪指针就OK了。</p>
<h2 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h2><p>在使用上，LinkedHashMap和HashMap的区别就是LinkedHashMap是有序的</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>LinkedHashMap继承自HashMap,它的新增(put)和获取(get)方法都是复用父类的HashMap的代码，只是自己重写了put给get内部的某些接口来搞事情，这个特性在C++中叫钩子技术，在Java里面大家喜欢叫多态，其实多态这个词并不能很好的形容这种现象。</p>
<p><img src="http://p1k0tu9ph.bkt.clouddn.com/18-3-7/35826754.jpg" alt=""></p>
<p><img src="http://p1k0tu9ph.bkt.clouddn.com/18-3-7/1366019.jpg" alt=""></p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> static <span class="class"><span class="keyword">class</span> <span class="title">Entry&lt;K</span>,<span class="title">V&gt;</span> <span class="keyword">extends</span> <span class="title">HashMap</span>.<span class="title">Entry&lt;K</span>,<span class="title">V&gt;</span> </span>&#123;</div><div class="line">    <span class="comment">// These fields comprise the doubly linked list used for iteration.</span></div><div class="line">    <span class="type">Entry</span>&lt;<span class="type">K</span>,<span class="type">V</span>&gt; before, after;</div><div class="line"></div><div class="line"><span class="type">Entry</span>(int hash, <span class="type">K</span> key, <span class="type">V</span> value, <span class="type">HashMap</span>.<span class="type">Entry</span>&lt;<span class="type">K</span>,<span class="type">V</span>&gt; next) &#123;</div><div class="line">        <span class="keyword">super</span>(hash, key, value, next);</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>前面四个，是从HashMap.Entry中继承过来的；后面两个，是是LinkedHashMap独有的。不要搞错了next和before、After，next是用于维护HashMap指定table位置上连接的Entry的顺序的，before、After是用于维护Entry插入的先后顺序的(为了维护双向链表)。</p>
<h3 id="利用LinkedHashMap实现LRU缓存"><a href="#利用LinkedHashMap实现LRU缓存" class="headerlink" title="利用LinkedHashMap实现LRU缓存"></a>利用LinkedHashMap实现LRU缓存</h3>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CGLIB和Java动态代理的区别&quot;&gt;&lt;a href=&quot;#CGLIB和Java动态代理的区别&quot; class=&quot;headerlink&quot; title=&quot;CGLIB和Java动态代理的区别&quot;&gt;&lt;/a&gt;CGLIB和Java动态代理的区别&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Java
    
    </summary>
    
      <category term="Java" scheme="http://wyu.space/categories/Java/"/>
    
    
      <category term="Java" scheme="http://wyu.space/tags/Java/"/>
    
      <category term="知识点" scheme="http://wyu.space/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>MySQL相关知识点</title>
    <link href="http://wyu.space/2018/05/02/MySQL%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://wyu.space/2018/05/02/MySQL相关知识点/</id>
    <published>2018-05-01T17:02:15.000Z</published>
    <updated>2018-05-02T15:36:38.930Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sql语句相关"><a href="#sql语句相关" class="headerlink" title="sql语句相关"></a>sql语句相关</h1><p>使用having过滤分组，使用where过滤行数据。集合操作使用having不使用where</p>
<p>%匹配0个或多个，_匹配单个</p>
<p>and 优先级大于 or</p>
<p>UNION并 </p>
<p>MINUS差 INTERSECT交 MYSQL不支持</p>
<p>UNION 内部的 SELECT 语句必须拥有相同数量的列。列也必须拥有相似的数据类型。同时，每条 SELECT 语句中的列的顺序必须相同。</p>
<p>允许重复 UNION ALL</p>
<p>拼接字段 mysql使用contact() oracle使用“||”和“+”</p>
<p>MySQL不支持top</p>
<p>limit要把前面所有的记录扫描出来截取需要的，如果id靠后费时间</p>
<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>b树索引 </p>
<p>位图索引</p>
<h2 id="rowid"><a href="#rowid" class="headerlink" title="rowid"></a>rowid</h2><ol>
<li>rowid是18位大小写加数字混杂体，唯一表代该条记录在DBF文件中的位置</li>
<li>MySQL没有</li>
</ol>
<p>在定义primary key或unique约束后系统自动在相应的列上创建索引</p>
<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ol>
<li>唯一索引：唯一索引不允许两行具有相同的索引值</li>
<li>主键索引：为表定义一个主键将自动创建主键索引，主键索引是唯一索引的特殊类型。主键索引要求主键中的每个值是唯一的，并且不能为空</li>
<li>聚集索引(Clustered)：表中各行的物理顺序与键值的逻辑（索引）顺序相同，每个表只能有一个</li>
<li>非聚集索引(Non-clustered)：非聚集索引指定表的逻辑顺序。数据存储在一个位置，索引存储在另一个位置，索引中包含指向数据存储位置的指针。一个表上的可以有多个，小于249个</li>
</ol>
<h1 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h1><p>GRANT 和INVOKE管理</p>
<h1 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h1><p>触发器与单个表相连</p>
<p>在多表关联的视图上创建触发器</p>
<h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><p>MySQL：不同存储引擎支持不同锁机制</p>
<p>表级锁：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低。<br>行级锁：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。<br>页面锁：开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般</p>
<h2 id="MyISAM与INNODB"><a href="#MyISAM与INNODB" class="headerlink" title="MyISAM与INNODB"></a>MyISAM与INNODB</h2><h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><p>select 读锁</p>
<p>insert update delete 写锁</p>
<p>MyISAM支持并发锁（local）</p>
<p>读写争用，写锁获得锁</p>
<p>一定情况下，允许查询和插入并发执行</p>
<p>low-priority-updates降低优先级</p>
<h3 id="INNODB（支持事务、行级锁）"><a href="#INNODB（支持事务、行级锁）" class="headerlink" title="INNODB（支持事务、行级锁）"></a>INNODB（支持事务、行级锁）</h3><p>更新丢失（Lost Update）应用的问题，加锁解决</p>
<p>脏读（Dirty Reads）</p>
<p>不可重复读（Non-Repeatable Reads）</p>
<p>幻读（Phantom Reads） 都是读一致性问题</p>
<ol>
<li>加锁解决</li>
<li>提供时间点的版本快照（MVCC 多版本并发控制）</li>
</ol>
<p>未提交读（Read uncommitted） 最低级</p>
<p>已提交读（Read committed） 语句级</p>
<p>可重复读（Repeatable read） 事务级</p>
<p>可序列化（Serializable） 最高级别，事务级</p>
<p>共享锁 </p>
<p>排它锁</p>
<p>意向共享锁（先加意向锁）</p>
<p>意向排它锁</p>
<p>update delete insert 自动加排它锁</p>
<p>select 不加锁</p>
<p>select … for update 排它锁</p>
<p>select … lock in share mode 共享锁</p>
<p>对一个表而言，尽可能以固定的顺序存取表中的行。这样可以大减少死锁的机会。</p>
<p>只有通过索引条件检索数据，innodb才会使用行级锁，否则使用表锁。</p>
<p>范围查找不存在的加间隙锁（Next-Key锁）不使用间隙锁会发生幻读 </p>
<p>造成锁等待</p>
<p>绝大部分情况下使用行级锁（选择innodb的理由）</p>
<p>lock tables 加表锁 </p>
<p>表锁 MySQL Server层管理，autocommit设为0 否则不加锁。</p>
<p>先commit 再 unlock tables；</p>
<p>MYISAM锁一次获得，不会产生死锁，INNODB逐步获得，发生死锁 设置innodb_lock_wait_timeout</p>
<p>事务中要更新记录，直接申请排它锁 </p>
<p>在REPEATEABLE-READ隔离级别下，如果两个线程同时对相同条件记录用SELECT…ROR UPDATE加排他锁，在没有符合该记录情况下，两个线程都会加锁成功。程序发现记录尚不存在，就试图插入一条新记录，如果两个线程都这么做，就会出现死锁。这种情况下，将隔离级别改成READ COMMITTED，就可以避免问题。</p>
<p>当隔离级别为READ COMMITED时，如果两个线程都先执行SELECT…FOR UPDATE，判断是否存在符合条件的记录，如果没有，就插入记录。此时，只有一个线程能插入成功，另一个线程会出现锁等待，当第１个线程提交后，第２个线程会因主键重出错，但虽然这个线程出错了，却会获得一个排他锁！这时如果有第３个线程又来申请排他锁，也会出现死锁。对于这种情况，可以直接做插入操作，然后再捕获主键重异常，或者在遇到主键重错误时，总是执行ROLLBACK释放获得的排他锁。</p>
<h2 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h2><p>在查询完数据的时候就把事务锁起来，直到提交事务</p>
<p>select … for update;</p>
<h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><p>在修改数据的时候把事务锁起来，通过version的方式来进行锁定</p>
<p>update … set … , version = version + 1 where … and version= …;</p>
<h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><h2 id="主键（不支持非主键聚集索引）"><a href="#主键（不支持非主键聚集索引）" class="headerlink" title="主键（不支持非主键聚集索引）"></a>主键（不支持非主键聚集索引）</h2><p>也是用于控件字段内容不能重复，但它在一个表只允许出现一个。</p>
<h2 id="Unipqu约束"><a href="#Unipqu约束" class="headerlink" title="Unipqu约束"></a>Unipqu约束</h2><p>控件字段内容不能重复，一个表允许有多个 Unique 约束。</p>
<h2 id="Check约束"><a href="#Check约束" class="headerlink" title="Check约束"></a>Check约束</h2><p>用于控制字段的值范围。</p>
<h2 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h2><p>用于预防破坏表之间连接的动作，也能防止非法数据插入外键列，因为它必须是它指向的那个表中的值之一。</p>
<h2 id="不能为空约束"><a href="#不能为空约束" class="headerlink" title="不能为空约束"></a>不能为空约束</h2><p>用于控制字段的内容一定不能为空（NULL）</p>
<h1 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h1><h2 id="第一范式"><a href="#第一范式" class="headerlink" title="第一范式"></a>第一范式</h2><p>第一范式：字段是最小的的单元不可再分</p>
<h2 id="第二范式"><a href="#第二范式" class="headerlink" title="第二范式"></a>第二范式</h2><p>满足第一范式,表中的字段必须完全依赖于全部主键而非部分主键。</p>
<h2 id="第三范式"><a href="#第三范式" class="headerlink" title="第三范式"></a>第三范式</h2><p>满足第二范式，非主键外的所有字段必须互不依赖</p>
<h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><p>向视图提供数据内容的语句为 SELECT 语句,可以将视图理解为存储起来的 SELECT 语句</p>
<p>不提高效率。</p>
<h1 id="语言分类"><a href="#语言分类" class="headerlink" title="语言分类"></a>语言分类</h1><h2 id="DML-数据操纵语言"><a href="#DML-数据操纵语言" class="headerlink" title="DML 数据操纵语言"></a>DML 数据操纵语言</h2><p>select update insert delete</p>
<h2 id="DDL-数据库定义语言"><a href="#DDL-数据库定义语言" class="headerlink" title="DDL 数据库定义语言"></a>DDL 数据库定义语言</h2><p>create alter drop</p>
<h2 id="DCL-数据库控制语言"><a href="#DCL-数据库控制语言" class="headerlink" title="DCL 数据库控制语言"></a>DCL 数据库控制语言</h2><p>grant deny revoke</p>
<h2 id="delete-drop-truncate-区别"><a href="#delete-drop-truncate-区别" class="headerlink" title="delete drop truncate 区别"></a>delete drop truncate 区别</h2><p>delete逐行删除，删除速度慢</p>
<h1 id="超键、候选键、主键、外键"><a href="#超键、候选键、主键、外键" class="headerlink" title="超键、候选键、主键、外键"></a>超键、候选键、主键、外键</h1><h2 id="超键"><a href="#超键" class="headerlink" title="超键"></a>超键</h2><p>在关系中能唯一标识元组的属性集称为关系模式的超键</p>
<h2 id="候选键"><a href="#候选键" class="headerlink" title="候选键"></a>候选键</h2><p>是最小超键，即没有冗余元素的超键。</p>
<h2 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h2><p>数据库表中对储存数据对象予以唯一和完整标识的数据列或属性的组合</p>
<h2 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h2><p>在一个表中存在的另一个表的主键称此表的外键。</p>
<h1 id="防止丢失"><a href="#防止丢失" class="headerlink" title="防止丢失"></a>防止丢失</h1><p>archivelog mode(归档模式)只要其归档日志文件不丢失，就可以有效地防止数据丢失。</p>
<h1 id="MyIASM和Innodb两种引擎所使用的索引的数据结构是什么？"><a href="#MyIASM和Innodb两种引擎所使用的索引的数据结构是什么？" class="headerlink" title="MyIASM和Innodb两种引擎所使用的索引的数据结构是什么？"></a>MyIASM和Innodb两种引擎所使用的索引的数据结构是什么？</h1><p>都是B+树!</p>
<p>MyIASM引擎，B+树的数据结构中存储的内容实际上是实际数据的地址值。也就是说它的索引和实际数据是分开的，只不过使用索引指向了实际数据。这种索引的模式被称为非聚集索引。</p>
<p>Innodb引擎的索引的数据结构也是B+树，只不过数据结构中存储的都是实际的数据，这种索引有被称为聚集索引。</p>
<h1 id="varchar和char的区别"><a href="#varchar和char的区别" class="headerlink" title="varchar和char的区别"></a>varchar和char的区别</h1><p>Char是一种固定长度的类型，varchar是一种可变长度的类型</p>
<h1 id="mysql有关权限的表都有哪几个"><a href="#mysql有关权限的表都有哪几个" class="headerlink" title="mysql有关权限的表都有哪几个"></a>mysql有关权限的表都有哪几个</h1><p>权限表存放在mysql数据库里，由mysql_install_db脚本初始化</p>
<ol>
<li>user权限表：记录允许连接到服务器的用户帐号信息，里面的权限是全局级的。</li>
<li>db权限表：记录各个帐号在各个数据库上的操作权限。</li>
<li>table_priv权限表：记录数据表级的操作权限。</li>
<li>columns_priv权限表：记录数据列级的操作权限。</li>
<li>host权限表：配合db权限表对给定主机上数据库级操作权限作更细致的控制。这个权限表不受GRANT和REVOKE语句的影响。</li>
</ol>
<h1 id="数据表修复（MyISAM）"><a href="#数据表修复（MyISAM）" class="headerlink" title="数据表修复（MyISAM）"></a>数据表修复（MyISAM）</h1><p>使用 myisamchk 来修复</p>
<ol>
<li>修复前将mysql服务停止。</li>
<li>打开命令行方式，然后进入到mysql的/bin目录。</li>
<li>执行myisamchk –recover 数据库所在路径/*.MYI</li>
</ol>
<p>REPAIR TABLE 用于修复被破坏的表。<br>OPTIMIZE TABLE 用于回收闲置的数据库空间，当表上的数据行被删除时，所占据的磁盘空间并没有立即被回收，使用了OPTIMIZE TABLE命令后这些空间将被回收，并且对磁盘上的数据行进行重排（注意：是磁盘上，而非数据库）</p>
<h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><h2 id="选择最有效率的表名顺序"><a href="#选择最有效率的表名顺序" class="headerlink" title="选择最有效率的表名顺序"></a>选择最有效率的表名顺序</h2><p>数据库的解析器按照从右到左的顺序处理FROM子句中的表名，FROM子句中写在最后的表将被最先处理<br>在FROM子句中包含多个表的情况下：</p>
<ol>
<li><p>如果三个表是完全无关系的话，将记录和列名最少的表，写在最后，然后依次类推<br>也就是说：选择记录条数最少的表放在最后</p>
</li>
<li><p>如果有3个以上的表连接查询：<br>如果三个表是有关系的话，将引用最多的表，放在最后，然后依次类推。<br>也就是说：被其他表所引用的表放在最后</p>
</li>
</ol>
<h2 id="WHERE子句中的连接顺序"><a href="#WHERE子句中的连接顺序" class="headerlink" title="WHERE子句中的连接顺序"></a>WHERE子句中的连接顺序</h2><p>表之间的连接必须写在其他WHERE条件之左,那些可以过滤掉最大数量记录的条件必须写在WHERE子句的之右。</p>
<h2 id="SELECT子句中避免使用-号"><a href="#SELECT子句中避免使用-号" class="headerlink" title="SELECT子句中避免使用*号"></a>SELECT子句中避免使用*号</h2><h2 id="用TRUNCATE替代DELETE"><a href="#用TRUNCATE替代DELETE" class="headerlink" title="用TRUNCATE替代DELETE"></a>用TRUNCATE替代DELETE</h2><p>删除表的全部记录，除了表结构才这样做。</p>
<h2 id="多使用内部函数提高SQL效率"><a href="#多使用内部函数提高SQL效率" class="headerlink" title="多使用内部函数提高SQL效率"></a>多使用内部函数提高SQL效率</h2><p>使用mysql的concat()函数会比使用||来进行拼接快，因为concat()函数已经被mysql优化过了。</p>
<h2 id="使用表或列的别名"><a href="#使用表或列的别名" class="headerlink" title="使用表或列的别名"></a>使用表或列的别名</h2><p>如果表或列的名称太长了，使用一些简短的别名也能稍微提高一些SQL的性能。要扫描的字符长度就变少了</p>
<h2 id="多使用commit"><a href="#多使用commit" class="headerlink" title="多使用commit"></a>多使用commit</h2><p>释放回滚点</p>
<h2 id="索引-1"><a href="#索引-1" class="headerlink" title="索引"></a>索引</h2><h2 id="SQL写大写（Oracle）"><a href="#SQL写大写（Oracle）" class="headerlink" title="SQL写大写（Oracle）"></a>SQL写大写（Oracle）</h2><h2 id="避免在索引列上使用NOT（全表扫描）"><a href="#避免在索引列上使用NOT（全表扫描）" class="headerlink" title="避免在索引列上使用NOT（全表扫描）"></a>避免在索引列上使用NOT（全表扫描）</h2><h2 id="避免在索引列上使用计算（全表扫描）"><a href="#避免在索引列上使用计算（全表扫描）" class="headerlink" title="避免在索引列上使用计算（全表扫描）"></a>避免在索引列上使用计算（全表扫描）</h2><h2 id="用-gt-替代-gt-（低效）"><a href="#用-gt-替代-gt-（低效）" class="headerlink" title="用 &gt;= 替代 &gt;（低效）"></a>用 &gt;= 替代 &gt;（低效）</h2><h2 id="用IN替代OR"><a href="#用IN替代OR" class="headerlink" title="用IN替代OR"></a>用IN替代OR</h2><h2 id="总是使用索引的第一个列"><a href="#总是使用索引的第一个列" class="headerlink" title="总是使用索引的第一个列"></a>总是使用索引的第一个列</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;sql语句相关&quot;&gt;&lt;a href=&quot;#sql语句相关&quot; class=&quot;headerlink&quot; title=&quot;sql语句相关&quot;&gt;&lt;/a&gt;sql语句相关&lt;/h1&gt;&lt;p&gt;使用having过滤分组，使用where过滤行数据。集合操作使用having不使用where&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://wyu.space/categories/MySQL/"/>
    
    
      <category term="知识点" scheme="http://wyu.space/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
      <category term="MySQL" scheme="http://wyu.space/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Spring Bean的加载过程</title>
    <link href="http://wyu.space/2017/08/25/Spring%20Bean%E7%9A%84%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/"/>
    <id>http://wyu.space/2017/08/25/Spring Bean的加载过程/</id>
    <published>2017-08-25T15:10:18.730Z</published>
    <updated>2018-04-30T16:40:51.018Z</updated>
    
    <content type="html"><![CDATA[<h2 id="获取当前时间的工具类"><a href="#获取当前时间的工具类" class="headerlink" title="获取当前时间的工具类"></a>获取当前时间的工具类</h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.net.wangshifu;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeConvertUtil</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> SimpleDateFormat format = <span class="keyword">new</span> <span class="type">SimpleDateFormat</span>(<span class="string">"yyyy-MM-dd HH:mm:ss:SSS"</span>);</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> getCurrentTime() &#123;</div><div class="line">       <span class="keyword">return</span> format.format(System.currentTimeMillis());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="测试Bean"><a href="#测试Bean" class="headerlink" title="测试Bean"></a>测试Bean</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.net.wangshifu;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.DisposableBean;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.InitializingBean;</div><div class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLoadingOrder</span>  <span class="keyword">implements</span> <span class="title">InitializingBean</span>,<span class="title">DisposableBean</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String test1;</div><div class="line">    <span class="keyword">private</span> String test2;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        test1 = <span class="string">"static"</span>;</div><div class="line">        System.out.println(TimeConvertUtil.getCurrentTime()+<span class="string">" TestLoadingOrder.static has been executed"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getTest1</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> test1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setTest1</span><span class="params">(String test1)</span> </span>&#123;</div><div class="line">        TestLoadingOrder.test1 = test1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTest2</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> test2;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTest2</span><span class="params">(String test2)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.test2 = test2;</div><div class="line">        System.out.println(TimeConvertUtil.getCurrentTime()+<span class="string">" TestLoadingOrder.setTest2 has been executed"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init_method</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(TimeConvertUtil.getCurrentTime()+<span class="string">" TestLoadingOrder.init_method has been executed"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy_method</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        System.out.println(TimeConvertUtil.getCurrentTime()+<span class="string">" TestLoadingOrder.destory_method has been executed"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    TestLoadingOrder() &#123;</div><div class="line">        System.out.println(TimeConvertUtil.getCurrentTime()+<span class="string">" TestLoadingOrder.construct has been executed"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        System.out.println(TimeConvertUtil.getCurrentTime()+<span class="string">" TestLoadingOrder.afterProSertiesSet has been executed"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@PostConstruct</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postConstruct</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(TimeConvertUtil.getCurrentTime()+<span class="string">" TestLoadingOrder.postConstruct has been executed"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        System.out.println(TimeConvertUtil.getCurrentTime()+<span class="string">" TestLoadingOrder.destory has been executed"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="InstantiationAwareBeanPostProcessor的实现类"><a href="#InstantiationAwareBeanPostProcessor的实现类" class="headerlink" title="InstantiationAwareBeanPostProcessor的实现类"></a>InstantiationAwareBeanPostProcessor的实现类</h2><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.net.wangshifu;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.PropertyValues;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.beans.PropertyDescriptor;</div><div class="line"></div><div class="line"><span class="keyword">public</span> class MyInstantiationAwareBeanPostProcessor implements InstantiationAwareBeanPostProcessor &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">Object</span> postProcessBeforeInstantiation(Class&lt;?&gt; aClass, <span class="keyword">String</span> s) <span class="keyword">throws</span> BeansException &#123;</div><div class="line">        <span class="keyword">if</span> (aClass == TestLoadingOrder.class) &#123;</div><div class="line">            System.out.<span class="built_in">println</span>(TimeConvertUtil.getCurrentTime()+<span class="string">" InstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation: "</span>+s);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> postProcessAfterInstantiation(<span class="keyword">Object</span> o, <span class="keyword">String</span> s) <span class="keyword">throws</span> BeansException &#123;</div><div class="line">        <span class="keyword">if</span> (o.getClass() == TestLoadingOrder.class) &#123;</div><div class="line">            System.out.<span class="built_in">println</span>(TimeConvertUtil.getCurrentTime()+<span class="string">" InstantiationAwareBeanPostProcessor.postProcessAfterInstantiation: "</span>+s);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> PropertyValues postProcessPropertyValues(PropertyValues propertyValues, PropertyDescriptor[] propertyDescriptors, <span class="keyword">Object</span> o, <span class="keyword">String</span> s) <span class="keyword">throws</span> BeansException &#123;</div><div class="line">        <span class="keyword">if</span> (o.getClass() == TestLoadingOrder.class) &#123;</div><div class="line">            System.out.<span class="built_in">println</span>(TimeConvertUtil.getCurrentTime()+<span class="string">" InstantiationAwareBeanPostProcessor.postProcessPropertyValues: "</span>+s);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">Object</span> postProcessBeforeInitialization(<span class="keyword">Object</span> o, <span class="keyword">String</span> s) <span class="keyword">throws</span> BeansException &#123;</div><div class="line">        <span class="keyword">if</span> (o.getClass() == TestLoadingOrder.class) &#123;</div><div class="line">            System.out.<span class="built_in">println</span>(TimeConvertUtil.getCurrentTime()+<span class="string">" InstantiationAwareBeanPostProcessor.postProcessBeforeInitialization: "</span>+s);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> o;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">Object</span> postProcessAfterInitialization(<span class="keyword">Object</span> o, <span class="keyword">String</span> s) <span class="keyword">throws</span> BeansException &#123;</div><div class="line">        <span class="keyword">if</span> (o.getClass() == TestLoadingOrder.class) &#123;</div><div class="line">            System.out.<span class="built_in">println</span>(TimeConvertUtil.getCurrentTime()+<span class="string">" InstantiationAwareBeanPostProcessor.postProcessAfterInitialization: "</span>+s);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> o;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="BeanPostProcessor的实现类"><a href="#BeanPostProcessor的实现类" class="headerlink" title="BeanPostProcessor的实现类"></a>BeanPostProcessor的实现类</h2><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.net.wangshifu;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;</div><div class="line"></div><div class="line"><span class="keyword">public</span> class MyBeanPostProcessor implements BeanPostProcessor &#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">Object</span> postProcessBeforeInitialization(<span class="keyword">Object</span> o, <span class="keyword">String</span> s) <span class="keyword">throws</span> BeansException &#123;</div><div class="line">        <span class="keyword">if</span> (o.getClass()==TestLoadingOrder.class)&#123;</div><div class="line">            System.out.<span class="built_in">println</span>(TimeConvertUtil.getCurrentTime()+<span class="string">" BeanPostProcessor.postProcessBeforeInitialization :"</span> + o.getClass());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> o;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">Object</span> postProcessAfterInitialization(<span class="keyword">Object</span> o, <span class="keyword">String</span> s) <span class="keyword">throws</span> BeansException &#123;</div><div class="line">        <span class="keyword">if</span> (o.getClass()==TestLoadingOrder.class)&#123;</div><div class="line">            System.out.<span class="built_in">println</span>(TimeConvertUtil.getCurrentTime()+<span class="string">" BeanPostProcessor.postProcessAfterInitialization :"</span> + o.getClass());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> o;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="BeanFactoryPostProcessor的实现类"><a href="#BeanFactoryPostProcessor的实现类" class="headerlink" title="BeanFactoryPostProcessor的实现类"></a>BeanFactoryPostProcessor的实现类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.net.wangshifu;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanFactoryPostProcessor;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.ConfigurableListableBeanFactory;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanFactoryPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanFactoryPostProcessor</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory configurableListableBeanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">        System.out.println(TimeConvertUtil.getCurrentTime()+<span class="string">" postProcessBeanFactory has been executed"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="applicationContext-xml"><a href="#applicationContext-xml" class="headerlink" title="applicationContext.xml"></a>applicationContext.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></div><div class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></div><div class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"testLoadingOrder"</span> <span class="attr">class</span>=<span class="string">"cn.net.wangshifu.TestLoadingOrder"</span> <span class="attr">init-method</span>=<span class="string">"init_method"</span> <span class="attr">destroy-method</span>=<span class="string">"destroy_method"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"test2"</span> <span class="attr">value</span>=<span class="string">"Test2"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"instantiationAwareBeanPostProcessor"</span> <span class="attr">class</span>=<span class="string">"cn.net.wangshifu.MyInstantiationAwareBeanPostProcessor"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myBeanPostProcessor"</span> <span class="attr">class</span>=<span class="string">"cn.net.wangshifu.MyBeanPostProcessor"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myBeanFactoryPostProcessor"</span> <span class="attr">class</span>=<span class="string">"cn.net.wangshifu.MyBeanFactoryPostProcessor"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.net.wangshifu"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><figure class="highlight d"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.net.wangshifu;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</div><div class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Main &#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</div><div class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</div><div class="line">        TestLoadingOrder testLoadingOrder = (TestLoadingOrder) applicationContext.getBean(<span class="string">"testLoadingOrder"</span>);</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"test1: "</span> + TestLoadingOrder.getTest1());</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"test2: "</span> + testLoadingOrder.getTest2());</div><div class="line">        ((ClassPathXmlApplicationContext)applicationContext).registerShutdownHook();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">八月 <span class="selector-tag">28</span>, <span class="selector-tag">2017</span> <span class="selector-tag">10</span><span class="selector-pseudo">:40</span><span class="selector-pseudo">:06</span> 上午 <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.context</span><span class="selector-class">.support</span><span class="selector-class">.ClassPathXmlApplicationContext</span> <span class="selector-tag">prepareRefresh</span></div><div class="line">信息: <span class="selector-tag">Refreshing</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.context</span><span class="selector-class">.support</span><span class="selector-class">.ClassPathXmlApplicationContext</span>@<span class="selector-tag">685f4c2e</span>: <span class="selector-tag">startup</span> <span class="selector-tag">date</span> <span class="selector-attr">[Mon Aug 28 10:40:06 CST 2017]</span>; <span class="selector-tag">root</span> <span class="selector-tag">of</span> <span class="selector-tag">context</span> <span class="selector-tag">hierarchy</span></div><div class="line">八月 <span class="selector-tag">28</span>, <span class="selector-tag">2017</span> <span class="selector-tag">10</span><span class="selector-pseudo">:40</span><span class="selector-pseudo">:06</span> 上午 <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.beans</span><span class="selector-class">.factory</span><span class="selector-class">.xml</span><span class="selector-class">.XmlBeanDefinitionReader</span> <span class="selector-tag">loadBeanDefinitions</span></div><div class="line">信息: <span class="selector-tag">Loading</span> <span class="selector-tag">XML</span> <span class="selector-tag">bean</span> <span class="selector-tag">definitions</span> <span class="selector-tag">from</span> <span class="selector-tag">class</span> <span class="selector-tag">path</span> <span class="selector-tag">resource</span> <span class="selector-attr">[applicationContext.xml]</span></div><div class="line"><span class="selector-tag">2017-08-28</span> <span class="selector-tag">10</span><span class="selector-pseudo">:40</span><span class="selector-pseudo">:07</span><span class="selector-pseudo">:037</span> <span class="selector-tag">postProcessBeanFactory</span> <span class="selector-tag">has</span> <span class="selector-tag">been</span> <span class="selector-tag">executed</span></div><div class="line"><span class="selector-tag">2017-08-28</span> <span class="selector-tag">10</span><span class="selector-pseudo">:40</span><span class="selector-pseudo">:07</span><span class="selector-pseudo">:078</span> <span class="selector-tag">InstantiationAwareBeanPostProcessor</span><span class="selector-class">.postProcessBeforeInstantiation</span>: <span class="selector-tag">testLoadingOrder</span></div><div class="line"><span class="selector-tag">2017-08-28</span> <span class="selector-tag">10</span><span class="selector-pseudo">:40</span><span class="selector-pseudo">:07</span><span class="selector-pseudo">:081</span> <span class="selector-tag">TestLoadingOrder</span><span class="selector-class">.static</span> <span class="selector-tag">has</span> <span class="selector-tag">been</span> <span class="selector-tag">executed</span></div><div class="line"><span class="selector-tag">2017-08-28</span> <span class="selector-tag">10</span><span class="selector-pseudo">:40</span><span class="selector-pseudo">:07</span><span class="selector-pseudo">:082</span> <span class="selector-tag">TestLoadingOrder</span><span class="selector-class">.construct</span> <span class="selector-tag">has</span> <span class="selector-tag">been</span> <span class="selector-tag">executed</span></div><div class="line"><span class="selector-tag">2017-08-28</span> <span class="selector-tag">10</span><span class="selector-pseudo">:40</span><span class="selector-pseudo">:07</span><span class="selector-pseudo">:089</span> <span class="selector-tag">InstantiationAwareBeanPostProcessor</span><span class="selector-class">.postProcessAfterInstantiation</span>: <span class="selector-tag">testLoadingOrder</span></div><div class="line"><span class="selector-tag">2017-08-28</span> <span class="selector-tag">10</span><span class="selector-pseudo">:40</span><span class="selector-pseudo">:07</span><span class="selector-pseudo">:089</span> <span class="selector-tag">InstantiationAwareBeanPostProcessor</span><span class="selector-class">.postProcessBeforeInitialization</span>: <span class="selector-tag">testLoadingOrder</span></div><div class="line"><span class="selector-tag">2017-08-28</span> <span class="selector-tag">10</span><span class="selector-pseudo">:40</span><span class="selector-pseudo">:07</span><span class="selector-pseudo">:089</span> <span class="selector-tag">BeanPostProcessor</span><span class="selector-class">.postProcessBeforeInitialization</span> <span class="selector-pseudo">:class</span> <span class="selector-tag">cn</span><span class="selector-class">.net</span><span class="selector-class">.wangshifu</span><span class="selector-class">.TestLoadingOrder</span></div><div class="line"><span class="selector-tag">2017-08-28</span> <span class="selector-tag">10</span><span class="selector-pseudo">:40</span><span class="selector-pseudo">:07</span><span class="selector-pseudo">:089</span> <span class="selector-tag">TestLoadingOrder</span><span class="selector-class">.postConstruct</span> <span class="selector-tag">has</span> <span class="selector-tag">been</span> <span class="selector-tag">executed</span></div><div class="line"><span class="selector-tag">2017-08-28</span> <span class="selector-tag">10</span><span class="selector-pseudo">:40</span><span class="selector-pseudo">:07</span><span class="selector-pseudo">:090</span> <span class="selector-tag">TestLoadingOrder</span><span class="selector-class">.afterProSertiesSet</span> <span class="selector-tag">has</span> <span class="selector-tag">been</span> <span class="selector-tag">executed</span></div><div class="line"><span class="selector-tag">2017-08-28</span> <span class="selector-tag">10</span><span class="selector-pseudo">:40</span><span class="selector-pseudo">:07</span><span class="selector-pseudo">:090</span> <span class="selector-tag">TestLoadingOrder</span><span class="selector-class">.init_method</span> <span class="selector-tag">has</span> <span class="selector-tag">been</span> <span class="selector-tag">executed</span></div><div class="line"><span class="selector-tag">2017-08-28</span> <span class="selector-tag">10</span><span class="selector-pseudo">:40</span><span class="selector-pseudo">:07</span><span class="selector-pseudo">:090</span> <span class="selector-tag">InstantiationAwareBeanPostProcessor</span><span class="selector-class">.postProcessAfterInitialization</span>: <span class="selector-tag">testLoadingOrder</span></div><div class="line"><span class="selector-tag">2017-08-28</span> <span class="selector-tag">10</span><span class="selector-pseudo">:40</span><span class="selector-pseudo">:07</span><span class="selector-pseudo">:090</span> <span class="selector-tag">BeanPostProcessor</span><span class="selector-class">.postProcessAfterInitialization</span> <span class="selector-pseudo">:class</span> <span class="selector-tag">cn</span><span class="selector-class">.net</span><span class="selector-class">.wangshifu</span><span class="selector-class">.TestLoadingOrder</span></div><div class="line"><span class="selector-tag">test1</span>: <span class="selector-tag">static</span></div><div class="line"><span class="selector-tag">test2</span>: <span class="selector-tag">null</span></div><div class="line">八月 <span class="selector-tag">28</span>, <span class="selector-tag">2017</span> <span class="selector-tag">10</span><span class="selector-pseudo">:40</span><span class="selector-pseudo">:07</span> 上午 <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.context</span><span class="selector-class">.support</span><span class="selector-class">.ClassPathXmlApplicationContext</span> <span class="selector-tag">doClose</span></div><div class="line">信息: <span class="selector-tag">Closing</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.context</span><span class="selector-class">.support</span><span class="selector-class">.ClassPathXmlApplicationContext</span>@<span class="selector-tag">685f4c2e</span>: <span class="selector-tag">startup</span> <span class="selector-tag">date</span> <span class="selector-attr">[Mon Aug 28 10:40:06 CST 2017]</span>; <span class="selector-tag">root</span> <span class="selector-tag">of</span> <span class="selector-tag">context</span> <span class="selector-tag">hierarchy</span></div><div class="line"><span class="selector-tag">2017-08-28</span> <span class="selector-tag">10</span><span class="selector-pseudo">:40</span><span class="selector-pseudo">:07</span><span class="selector-pseudo">:132</span> <span class="selector-tag">TestLoadingOrder</span><span class="selector-class">.destory</span> <span class="selector-tag">has</span> <span class="selector-tag">been</span> <span class="selector-tag">executed</span></div><div class="line"><span class="selector-tag">2017-08-28</span> <span class="selector-tag">10</span><span class="selector-pseudo">:40</span><span class="selector-pseudo">:07</span><span class="selector-pseudo">:132</span> <span class="selector-tag">TestLoadingOrder</span><span class="selector-class">.destory_method</span> <span class="selector-tag">has</span> <span class="selector-tag">been</span> <span class="selector-tag">executed</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;获取当前时间的工具类&quot;&gt;&lt;a href=&quot;#获取当前时间的工具类&quot; class=&quot;headerlink&quot; title=&quot;获取当前时间的工具类&quot;&gt;&lt;/a&gt;获取当前时间的工具类&lt;/h2&gt;&lt;figure class=&quot;highlight haxe&quot;&gt;&lt;table&gt;&lt;tr
    
    </summary>
    
      <category term="Spring" scheme="http://wyu.space/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://wyu.space/tags/Spring/"/>
    
      <category term="Bean" scheme="http://wyu.space/tags/Bean/"/>
    
  </entry>
  
  <entry>
    <title>字符串的最长不重复子串</title>
    <link href="http://wyu.space/2017/08/25/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%9C%80%E9%95%BF%E4%B8%8D%E9%87%8D%E5%A4%8D%E5%AD%90%E4%B8%B2/"/>
    <id>http://wyu.space/2017/08/25/字符串的最长不重复子串/</id>
    <published>2017-08-25T01:13:05.245Z</published>
    <updated>2018-04-30T16:42:10.195Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> class Main &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> findLongestPart(<span class="keyword">String</span> <span class="built_in">str</span>) &#123;</div><div class="line">        <span class="built_in">int</span> beginToken = <span class="number">0</span>;<span class="comment">//设置当前最长子串的开始位置，在后面使用的过程中依据HashMap中存的数字的位置来更新这个token值</span></div><div class="line">        <span class="built_in">char</span>[] nums = <span class="built_in">str</span>.toCharArray();</div><div class="line">        <span class="built_in">int</span>[] thisNumLength = <span class="keyword">new</span> <span class="built_in">int</span>[nums.length];<span class="comment">//从当前位置开始的最长子串的长度</span></div><div class="line">        <span class="keyword">HashMap</span>&lt;Character,Integer&gt;lastLocation = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;&gt;();<span class="comment">//每个数字在遍历到当前位置时最后出现的位置</span></div><div class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>;i&lt;nums.length;i++) &#123;</div><div class="line">            <span class="keyword">if</span> (lastLocation.containsKey(nums[i])&amp;&amp;lastLocation.<span class="built_in">get</span>(nums[i])+<span class="number">1</span>&gt;beginToken)&#123;</div><div class="line">                beginToken = lastLocation.<span class="built_in">get</span>(nums[i])+<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = beginToken;j&lt;=i;j++)&#123;</div><div class="line">                thisNumLength[j]++;</div><div class="line">            &#125;</div><div class="line">            lastLocation.put(nums[i],i);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">int</span> resultBeginToken = <span class="number">0</span>;<span class="comment">//结果字符串的开始位置</span></div><div class="line">        <span class="built_in">int</span> resultLength = <span class="number">0</span>;<span class="comment">//结果字符串的长度</span></div><div class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>;i&lt;thisNumLength.length;i++)&#123;</div><div class="line">            <span class="keyword">if</span> (thisNumLength[i]&gt;resultLength)&#123;</div><div class="line">                resultBeginToken = i;</div><div class="line">                resultLength = thisNumLength[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">str</span>.substring(resultBeginToken,resultBeginToken+resultLength);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">        <span class="keyword">String</span> test = <span class="string">"absccabdrtyut"</span>;</div><div class="line">        System.out.<span class="built_in">println</span>(findLongestPart(test));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight processing&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;
    
    </summary>
    
      <category term="算法" scheme="http://wyu.space/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="字符串" scheme="http://wyu.space/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="最长不重复子串" scheme="http://wyu.space/tags/%E6%9C%80%E9%95%BF%E4%B8%8D%E9%87%8D%E5%A4%8D%E5%AD%90%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>Axis2 服务器未能识别 HTTP 头 SOAPAction 的值 的解决办法</title>
    <link href="http://wyu.space/2017/08/19/Axis2%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9C%AA%E8%83%BD%E8%AF%86%E5%88%AB%20HTTP%20%E5%A4%B4%20SOAPAction%20%E7%9A%84%E5%80%BC%20%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://wyu.space/2017/08/19/Axis2 服务器未能识别 HTTP 头 SOAPAction 的值 的解决办法/</id>
    <published>2017-08-19T06:24:46.791Z</published>
    <updated>2018-04-30T16:40:14.112Z</updated>
    
    <content type="html"><![CDATA[<p>公司的WebService服务端使用.NET生成，客户端需要使用Java来写，客户端代码如下：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">import</span> org.apache.axiom.om.OMAbstractFactory;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> org.apache.axiom.om.OMElement;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> org.apache.axiom.om.OMFactory;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> org.apache.axiom.om.OMNamespace;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> org.apache.axis2.AxisFault;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> org.apache.axis2.addressing.EndpointReference;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> org.apache.axis2.client.Options;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> org.apache.axis2.client.ServiceClient;</span></div><div class="line"></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> java.rmi.RemoteException;</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Axis2Test</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) throws RemoteException &#123;</div><div class="line">        test();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> test() throws AxisFault &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String url = <span class="string">"目标URL"</span>;</div><div class="line">            Options options = <span class="keyword">new</span> Options();</div><div class="line">            EndpointReference targetEPR = <span class="keyword">new</span> EndpointReference(url);</div><div class="line">            options.setTo(targetEPR);</div><div class="line">            ServiceClient sender = <span class="keyword">new</span> ServiceClient();</div><div class="line">            sender.setOptions(options);</div><div class="line">            OMFactory fac = OMAbstractFactory.getOMFactory();</div><div class="line">            String tns = <span class="string">"目标的TargetNameSpace"</span>;</div><div class="line">            OMNamespace omNs = fac.createOMNamespace(tns, <span class="string">""</span>);</div><div class="line">            OMElement method = fac.createOMElement(<span class="string">"调用的方法名"</span>, omNs);</div><div class="line">            OMElement symbol = fac.createOMElement(<span class="string">"参数名"</span>, omNs);</div><div class="line">            symbol.addChild(fac.createOMText(symbol, <span class="string">"参数值"</span>));</div><div class="line">            method.addChild(symbol);</div><div class="line">            method.build();</div><div class="line">            OMElement result = sender.sendReceive(method);</div><div class="line">            System.out.println(result);</div><div class="line">        &#125; <span class="keyword">catch</span> (AxisFault axisFault) &#123;</div><div class="line">            axisFault.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在运行这段代码时出现了如下错误：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">org<span class="selector-class">.apache</span><span class="selector-class">.axis2</span><span class="selector-class">.AxisFault</span>: System<span class="selector-class">.Web</span><span class="selector-class">.Services</span><span class="selector-class">.Protocols</span><span class="selector-class">.SoapException</span>: 服务器未能识别 HTTP 头 SOAPAction 的值: 。</div><div class="line">   在 System<span class="selector-class">.Web</span><span class="selector-class">.Services</span><span class="selector-class">.Protocols</span><span class="selector-class">.Soap11ServerProtocolHelper</span><span class="selector-class">.RouteRequest</span>()</div><div class="line">   在 System<span class="selector-class">.Web</span><span class="selector-class">.Services</span><span class="selector-class">.Protocols</span><span class="selector-class">.SoapServerProtocol</span><span class="selector-class">.RouteRequest</span>(SoapServerMessage message)</div><div class="line">   在 System<span class="selector-class">.Web</span><span class="selector-class">.Services</span><span class="selector-class">.Protocols</span><span class="selector-class">.SoapServerProtocol</span><span class="selector-class">.Initialize</span>()</div><div class="line">   在 System<span class="selector-class">.Web</span><span class="selector-class">.Services</span><span class="selector-class">.Protocols</span><span class="selector-class">.ServerProtocol</span><span class="selector-class">.SetContext</span>(Type type, HttpContext context, HttpRequest request, HttpResponse response)</div><div class="line">   在 System<span class="selector-class">.Web</span><span class="selector-class">.Services</span><span class="selector-class">.Protocols</span><span class="selector-class">.ServerProtocolFactory</span><span class="selector-class">.Create</span>(Type type, HttpContext context, HttpRequest request, HttpResponse response, Boolean&amp; abortProcessing)</div><div class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.axis2</span><span class="selector-class">.util</span><span class="selector-class">.Utils</span><span class="selector-class">.getInboundFaultFromMessageContext</span>(Utils<span class="selector-class">.java</span>:<span class="number">508</span>)</div><div class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.axis2</span><span class="selector-class">.description</span><span class="selector-class">.OutInAxisOperationClient</span><span class="selector-class">.handleResponse</span>(OutInAxisOperation<span class="selector-class">.java</span>:<span class="number">368</span>)</div><div class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.axis2</span><span class="selector-class">.description</span><span class="selector-class">.OutInAxisOperationClient</span><span class="selector-class">.send</span>(OutInAxisOperation<span class="selector-class">.java</span>:<span class="number">414</span>)</div><div class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.axis2</span><span class="selector-class">.description</span><span class="selector-class">.OutInAxisOperationClient</span><span class="selector-class">.executeImpl</span>(OutInAxisOperation<span class="selector-class">.java</span>:<span class="number">225</span>)</div><div class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.axis2</span><span class="selector-class">.client</span><span class="selector-class">.OperationClient</span><span class="selector-class">.execute</span>(OperationClient<span class="selector-class">.java</span>:<span class="number">150</span>)</div><div class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.axis2</span><span class="selector-class">.client</span><span class="selector-class">.ServiceClient</span><span class="selector-class">.sendReceive</span>(ServiceClient<span class="selector-class">.java</span>:<span class="number">533</span>)</div><div class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.axis2</span><span class="selector-class">.client</span><span class="selector-class">.ServiceClient</span><span class="selector-class">.sendReceive</span>(ServiceClient<span class="selector-class">.java</span>:<span class="number">509</span>)</div><div class="line">	at Axis2Test.test(Axis2Test<span class="selector-class">.java</span>:<span class="number">34</span>)</div><div class="line">	at Axis2Test.main(Axis2Test<span class="selector-class">.java</span>:<span class="number">15</span>)</div></pre></td></tr></table></figure>
<p>经过查找之后发现JAX-WS规范不需要SoapAction，但是.NET需要，所以产生了这个错误。<br>在上网查找了之后发现可以在option对象下添加一个属性：</p>
<figure class="highlight apache"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute"><span class="nomarkup">options</span></span>.setAction(<span class="string">"目标的TargetNameSpace"</span>+<span class="string">"调用的方法名"</span>);</div></pre></td></tr></table></figure>
<p>添加后代码为：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">import</span> org.apache.axiom.om.OMAbstractFactory;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> org.apache.axiom.om.OMElement;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> org.apache.axiom.om.OMFactory;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> org.apache.axiom.om.OMNamespace;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> org.apache.axis2.AxisFault;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> org.apache.axis2.addressing.EndpointReference;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> org.apache.axis2.client.Options;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> org.apache.axis2.client.ServiceClient;</span></div><div class="line"></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> java.rmi.RemoteException;</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Axis2Test</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) throws RemoteException &#123;</div><div class="line">        test();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> test() throws AxisFault &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String url = <span class="string">"目标URL"</span>;</div><div class="line">            Options options = <span class="keyword">new</span> Options();</div><div class="line">            EndpointReference targetEPR = <span class="keyword">new</span> EndpointReference(url);</div><div class="line">            options.setTo(targetEPR);</div><div class="line">            options.setAction(<span class="string">"目标的TargetNameSpace"</span>+<span class="string">"调用的方法名"</span>);<span class="comment">//需要加上这条语句</span></div><div class="line">            ServiceClient sender = <span class="keyword">new</span> ServiceClient();</div><div class="line">            sender.setOptions(options);</div><div class="line">            OMFactory fac = OMAbstractFactory.getOMFactory();</div><div class="line">            String tns = <span class="string">"目标的TargetNameSpace"</span>;</div><div class="line">            OMNamespace omNs = fac.createOMNamespace(tns, <span class="string">""</span>);</div><div class="line">            OMElement method = fac.createOMElement(<span class="string">"调用的方法名"</span>, omNs);</div><div class="line">            OMElement symbol = fac.createOMElement(<span class="string">"参数名"</span>, omNs);</div><div class="line">            symbol.addChild(fac.createOMText(symbol, <span class="string">"参数值"</span>));</div><div class="line">            method.addChild(symbol);</div><div class="line">            method.build();</div><div class="line">            OMElement result = sender.sendReceive(method);</div><div class="line">            System.out.println(result);</div><div class="line">        &#125; <span class="keyword">catch</span> (AxisFault axisFault) &#123;</div><div class="line">            axisFault.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改后信息返回成功</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司的WebService服务端使用.NET生成，客户端需要使用Java来写，客户端代码如下：&lt;br&gt;&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;
    
    </summary>
    
      <category term="解决方法" scheme="http://wyu.space/categories/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    
    
      <category term="Java" scheme="http://wyu.space/tags/Java/"/>
    
      <category term="Axis2" scheme="http://wyu.space/tags/Axis2/"/>
    
      <category term="SOAPAction" scheme="http://wyu.space/tags/SOAPAction/"/>
    
      <category term=".NET" scheme="http://wyu.space/tags/NET/"/>
    
  </entry>
  
  <entry>
    <title>通过反射来实现List转为JSON</title>
    <link href="http://wyu.space/2017/08/19/%E9%80%9A%E8%BF%87%E5%8F%8D%E5%B0%84%E6%9D%A5%E5%AE%9E%E7%8E%B0List%E8%BD%AC%E4%B8%BAJSON/"/>
    <id>http://wyu.space/2017/08/19/通过反射来实现List转为JSON/</id>
    <published>2017-08-19T06:24:24.167Z</published>
    <updated>2018-04-30T16:41:37.874Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">import net.sf.json.JSONArray;</div><div class="line">import net.sf.json.JSONObject;</div><div class="line"></div><div class="line">import java.lang.reflect.InvocationTargetException;</div><div class="line">import java.lang.reflect.Method;</div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.Iterator;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> IteratorUtil&lt;T&gt; <span class="comment">&#123;</span></div><div class="line"><span class="comment">    </span></div><div class="line"><span class="comment">    /**</span></div><div class="line"><span class="comment">     * 将List格式转换为JSONArray格式</span></div><div class="line"><span class="comment">     * @param list</span></div><div class="line"><span class="comment">     * @param &lt;T&gt;</span></div><div class="line"><span class="comment">     * @return</span></div><div class="line"><span class="comment">     */</span></div><div class="line"><span class="comment">    public static &lt;T&gt; JSONArray convertToJson(List&lt;T&gt; list)&#123;</span></div><div class="line"><span class="comment">        if (list.size()==0)&#123;</span></div><div class="line"><span class="comment">            System.out.println("list 为空");</span></div><div class="line"><span class="comment">            return null;</span></div><div class="line"><span class="comment">        &#125;</span></div><div class="line">        <span class="keyword">Class</span> clazz = list.get(<span class="number">0</span>).getClass();</div><div class="line">        <span class="function"><span class="keyword">Method</span>[]<span class="title">methods</span> = <span class="title">clazz</span>.<span class="title">getMethods</span><span class="params">()</span>;</span></div><div class="line">        List&lt;<span class="function"><span class="keyword">Method</span>&gt;<span class="title">getMethods</span> = <span class="title">new</span> <span class="title">ArrayList</span>&lt;&gt;<span class="params">()</span>;</span></div><div class="line">        <span class="keyword">for</span> (<span class="function"><span class="keyword">Method</span> <span class="title">method</span>:</span>methods)<span class="comment">&#123;</span></div><div class="line"><span class="comment">            if (method.getName().matches("get[A-z]*")&amp;&amp;method.getDeclaringClass().equals(clazz))&#123;</span></div><div class="line"><span class="comment">                getMethods.add(method);</span></div><div class="line"><span class="comment">            &#125;</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">Iterator</span>&lt;T&gt; <span class="keyword">iterator</span> = list.iterator();</div><div class="line">        JSONArray jsonArray = null;</div><div class="line">        JSONObject jsonObject;</div><div class="line">        <span class="keyword">try</span> <span class="comment">&#123;</span></div><div class="line"><span class="comment">            jsonArray = new JSONArray();</span></div><div class="line"><span class="comment">            while (iterator.hasNext())&#123;</span></div><div class="line"><span class="comment">                jsonObject = new JSONObject();</span></div><div class="line"><span class="comment">                Object instance  = iterator.next();</span></div><div class="line"><span class="comment">                Iterator&lt;Method&gt; methodIterator = getMethods.iterator();</span></div><div class="line"><span class="comment">                while (methodIterator.hasNext())&#123;</span></div><div class="line"><span class="comment">                    Method method = methodIterator.next();</span></div><div class="line"><span class="comment">                    Object value = method.invoke(instance,new Object[]&#123;&#125;</span>);</div><div class="line">                    String field = <span class="function"><span class="keyword">method</span>.<span class="title">getName</span><span class="params">()</span>.<span class="title">substring</span><span class="params">(3,4)</span>.<span class="title">toLowerCase</span><span class="params">()</span>+<span class="title">method</span>.<span class="title">getName</span><span class="params">()</span>.<span class="title">substring</span><span class="params">(4)</span>;</span></div><div class="line">                    jsonObject.put(field,value);</div><div class="line">                &#125;</div><div class="line">                jsonArray.add(jsonObject);</div><div class="line">            &#125;</div><div class="line">        &#125; catch (IllegalAccessException e) <span class="comment">&#123;</span></div><div class="line"><span class="comment">            e.printStackTrace();</span></div><div class="line"><span class="comment">        &#125;</span> catch (InvocationTargetException e) <span class="comment">&#123;</span></div><div class="line"><span class="comment">            e.printStackTrace();</span></div><div class="line"><span class="comment">        &#125;</span><span class="keyword">finally</span> <span class="comment">&#123;</span></div><div class="line"><span class="comment">            return jsonArray;</span></div><div class="line"><span class="comment">        &#125;</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight oxygene&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/
    
    </summary>
    
      <category term="Java" scheme="http://wyu.space/categories/Java/"/>
    
    
      <category term="反射" scheme="http://wyu.space/tags/%E5%8F%8D%E5%B0%84/"/>
    
      <category term="List" scheme="http://wyu.space/tags/List/"/>
    
      <category term="JSON" scheme="http://wyu.space/tags/JSON/"/>
    
  </entry>
  
</feed>
